<?php

/**
 * @file
 * Contains authorization_drupal_roles.module.
 */

declare(strict_types=1);

/**
 * Migrate roles from field 'authorization_drupal_roles_roles' to user data.
 */
function authorization_drupal_roles_update_8004(&$sandbox) {

  if (!isset($sandbox['total'])) {
    $update_manager = \Drupal::entityDefinitionUpdateManager();
    $definition = $update_manager->getFieldStorageDefinition('authorization_drupal_roles_roles', 'user');
    if (is_null($definition)) {
      $sandbox['#finished'] = 1;
      \Drupal::logger('authorization_drupal_roles')
        ->error('"authorization_drupal_roles_roles" field is not present. Unable to move roles to user data.');
      return;
    }
    $profiles = \Drupal::entityTypeManager()
      ->getStorage('authorization_profile')
      ->loadMultiple();

    $sandbox['profiles'] = [];
    foreach ($profiles as $profile) {
      $sync_actions = $profile->get('synchronization_actions');
      if (!$sync_actions['revoke_provider_provisioned']) {
        continue;
      }
      $mappings = $profile->getConsumerMappings();
      $roles = [];
      foreach ($mappings as $mapping) {
        $role = $mapping['role'];
        if ($role == 'none') {
          continue;
        }
        $roles[] = $role;
      }
      if (empty($roles)) {
        continue;
      }
      $sandbox['profiles'][$profile->id()] = $roles;

    }
    if (empty($sandbox['profiles'])) {
      $sandbox['#finished'] = 1;
      \Drupal::logger('authorization_drupal_roles')
        ->notice('No profiles have revoke_provider_provisioned enabled. No roles to move to user data.');
      $update_manager = \Drupal::entityDefinitionUpdateManager();
      $definition = $update_manager->getFieldStorageDefinition('authorization_drupal_roles_roles', 'user');
      $update_manager->uninstallFieldStorageDefinition($definition);
      return;
    }

    $sandbox['current'] = 0;
    $query = \Drupal::entityQuery('user');
    $sandbox['user_ids'] = $query
      ->condition('authorization_drupal_roles_roles', NULL, 'IS NOT NULL')
      ->accessCheck(FALSE)
      ->execute();

    $sandbox['total'] = count($sandbox['user_ids']);

    if ($sandbox['total'] == 0) {
      $sandbox['#finished'] = 1;
      \Drupal::logger('authorization_drupal_roles')
        ->notice('No users have authorization_drupal_roles_roles values. No roles to move to user data.');
      $update_manager = \Drupal::entityDefinitionUpdateManager();
      $definition = $update_manager->getFieldStorageDefinition('authorization_drupal_roles_roles', 'user');
      $update_manager->uninstallFieldStorageDefinition($definition);
      return;
    }

    $sandbox['#finished'] = 0;

    return;
  }
  $user_storage = \Drupal::entityTypeManager()->getStorage('user');
  $start = \Drupal::time()->getRequestTime();
  $user_service = \Drupal::service('user.data');

  do {
    $user_id = array_pop($sandbox['user_ids']);
    $sandbox['current'] += 1;
    $user = $user_storage->load($user_id);
    $drupal_roles = $user->get('authorization_drupal_roles_roles');
    $roles = [];
    foreach ($drupal_roles as $role) {
      if (!$user->hasRole($role)) {
        continue;
      }
      $roles[$role] = $role;
    }
    $user_roles = [];
    foreach ($sandbox['profiles'] as $profile_id => $profile_roles) {
      foreach ($profile_roles as $role) {
        if (!isset($roles[$role])) {
          continue;
        }
        $user_roles[$role] = $profile_id;
        unset($roles[$role]);
      }
      if (empty($user_roles)) {
        continue;
      }
    }

    if (!empty($user_roles)) {
      $user_service->set('authorization_drupal_roles', $user_id, 'roles', $user_roles);
    }

    $now = \Drupal::time()->getCurrentTime();
  } while (30 > ($now - $start) && !empty($sandbox['user_ids']));

  if (empty($sandbox['user_ids'])) {
    $update_manager = \Drupal::entityDefinitionUpdateManager();
    $definition = $update_manager->getFieldStorageDefinition('authorization_drupal_roles_roles', 'user');
    $update_manager->uninstallFieldStorageDefinition($definition);
  }

  $finished = ($sandbox['current'] - 1) / $sandbox['total'];
  $sandbox['#finished'] = $finished;
}
